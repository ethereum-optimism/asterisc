version: 2.1

parameters:
  ci_builder_image:
    type: string
    # depends with rvsol/lib/optimism submodule version
    default: us-docker.pkg.dev/oplabs-tools-artifacts/images/ci-builder:v0.53.0

workflows:
  main:
    jobs:
      - contracts-bedrock-build
      - go-mod-download-monorepo
      - go-mod-download-asterisc
      - op-program-riscv:
          requires:
            - go-mod-download-monorepo
      - asterisc-prestate:
          requires:
            - go-mod-download-asterisc
            - op-program-riscv
            - contracts-bedrock-build
      - devnet-allocs-including-asterisc:
          requires:
            - asterisc-prestate
      - op-e2e-asterisc-tests:
          requires:
            - devnet-allocs-including-asterisc
      - prestate-reproducibility:
          version: "1.0.0"
          asterisc-commit: "25feabf"
      - prestate-reproducibility:
          version: "1.1.0"
          asterisc-commit: "25feabf"
      - prestate-reproducibility:
          version: "1.2.0"
          asterisc-commit: "25feabf"
      - prestate-reproducibility:
          version: "1.3.1"
          asterisc-commit: "25feabf"

commands:
  checkout-with-monorepo:
    steps:
      - checkout
      - run:
          name: Fetch submodules for asterisc
          # This will also fetch monorepo's submodule.
          # Therefore we do not have to call `make submodules` at monorepo root
          command: git submodule update --init --recursive
  install-contracts-dependencies:
    description: "Install the dependencies for the smart contracts"
    steps:
      - run:
          command: just install
          working_directory: rvsol/lib/optimism/packages/contracts-bedrock

jobs:
  contracts-bedrock-build:
    docker:
      - image: <<pipeline.parameters.ci_builder_image>>
    resource_class: xlarge
    steps:
      - checkout-with-monorepo
      - install-contracts-dependencies
      - restore_cache:
          name: Restore Go modules cache
          keys:
            - gomod-contracts-build-{{ checksum "go.sum" }}
            - gomod-contracts-build-
      - restore_cache:
          name: Restore Go build cache
          keys:
            - golang-build-cache-contracts-build-{{ checksum "go.sum" }}
            - golang-build-cache-contracts-build-
      - run:
          name: Print forge version
          command: forge --version
      - run:
          name: Pull artifacts
          command: bash scripts/ops/pull-artifacts.sh
          working_directory: rvsol/lib/optimism/packages/contracts-bedrock
      - run:
          name: Build contracts
          command: forge build --deny-warnings --skip test
          environment:
            FOUNDRY_PROFILE: ci
          working_directory: rvsol/lib/optimism/packages/contracts-bedrock
      - run:
          name: Generate allocs
          command: make devnet-allocs
          working_directory: rvsol/lib/optimism
      - save_cache:
          name: Save Go modules cache
          key: gomod-contracts-build-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"
      - save_cache:
          name: Save Go build cache
          key: golang-build-cache-contracts-build-{{ checksum "go.sum" }}
          paths:
            - "/root/.cache/go-build"
      - persist_to_workspace:
          root: rvsol/lib/optimism
          paths:
            - "packages/contracts-bedrock/cache"
            - "packages/contracts-bedrock/artifacts"
            - "packages/contracts-bedrock/forge-artifacts"
            - "packages/contracts-bedrock/deploy-config/devnetL1.json"
            - "packages/contracts-bedrock/deployments/devnetL1"
            - ".devnet"
            - ".devnet-standard"

  go-mod-download-monorepo:
    docker:
      - image: <<pipeline.parameters.ci_builder_image>>
    steps:
      - checkout-with-monorepo
      - restore_cache:
          key: gomod>-{{ checksum "rvsol/lib/optimism/go.sum" }}
          name: Restore Go modules cache for monorepo
      - run:
          name: Sanity check go mod cache path
          command: test "$(go env GOMODCACHE)" == "/go/pkg/mod" # yes, it's an odd path
          working_directory: rvsol/lib/optimism
      - run:
          command: go mod download
          name: Download Go module dependencies
          working_directory: rvsol/lib/optimism
      - run:
          name: Go mod tidy
          command: make mod-tidy && git diff --exit-code
          working_directory: rvsol/lib/optimism
      - run:
          name: run Go linter
          command: |
            # Identify how many cores it defaults to
            golangci-lint run --help | grep concurrency
            make lint-go
          working_directory: rvsol/lib/optimism
      - save_cache:
          key: gomod-{{ checksum "rvsol/lib/optimism/go.sum" }}
          name: Save Go modules cache
          paths:
            - "/go/pkg/mod"

  go-mod-download-asterisc:
    docker:
      - image: <<pipeline.parameters.ci_builder_image>>
    steps:
      - checkout
      - restore_cache:
          key: gomod-{{ checksum "go.sum" }}
          name: Restore Go modules cache
      - run:
          name: Sanity check go mod cache path
          command: test "$(go env GOMODCACHE)" == "/go/pkg/mod" # yes, it's an odd path
      - run:
          command: go mod download
          name: Download Go module dependencies
      - save_cache:
          key: gomod-{{ checksum "go.sum" }}
          name: Save Go modules cache
          paths:
            - "/go/pkg/mod"

  op-program-riscv:
    docker:
      - image: <<pipeline.parameters.ci_builder_image>>
    parameters:
      file:
        default: rvsol/lib/optimism/go.sum
        description: The file name of checksum for restore_cache and save_cache.
        type: string
      key:
        default: gomod
        description: The key of restore_cache and save_cache.
        type: string
    steps:
      - checkout-with-monorepo
      - restore_cache:
          key: gomod-{{ checksum "rvsol/lib/optimism/go.sum" }}
          name: Restore Go modules cache
      - run:
          name: Build op-program-client-riscv
          command: make op-program-client-riscv
          working_directory: rvsol/lib/optimism/op-program
      - run:
          name: Copy op-program-client-riscv to op-program-artifacts
          command: cp -r bin op-program-artifacts
          working_directory: rvsol/lib/optimism/op-program
      - persist_to_workspace:
          root: rvsol/lib/optimism/op-program
          paths:
            - "op-program-artifacts"

  asterisc-prestate:
    docker:
      - image: <<pipeline.parameters.ci_builder_image>>
    parameters:
      file:
        default: go.sum
        description: The file name of checksum for restore_cache and save_cache.
        type: string
      key:
        default: gomod
        description: The key of restore_cache and save_cache.
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - restore_cache:
          key: << parameters.key >>-{{ checksum "<< parameters.file >>" }}
          name: Restore Go modules cache
      - run:
          name: Load op-program-client-riscv
          command: |
            cp /tmp/workspace/op-program-artifacts/op-program-client-riscv.elf op-program-client-riscv.elf
      - run:
          name: Build Asterisc binary and contract
          command: make build
      - run:
          name: Generate asterisc prestate
          command: OP_PROGRAM_PATH=./op-program-client-riscv.elf make prestate
      - run:
          name: Copy asterisc artifacts to asterisc-artifacts
          command: cp -r rvgo/bin asterisc-artifacts
      - persist_to_workspace:
          root: .
          paths: 
            - "asterisc-artifacts"

  devnet-allocs-including-asterisc:
    docker:
      - image: <<pipeline.parameters.ci_builder_image>>
    steps:
      - checkout-with-monorepo
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Forge build
          # We first build here to avoid `failed to read artifact source file` foundry error while running forge script
          # issue: https://github.com/foundry-rs/foundry/issues/6572
          command: forge build
          working_directory: rvsol
      - run:
          name: Load asterisc absolute prestate
          command: cp /tmp/workspace/asterisc-artifacts/prestate-proof.json ./prestate-proof.json
          working_directory: rvsol
      - run:
          name: Load devnet-allocs
          command: |
            mkdir -p .devnet-standard
            cp /tmp/workspace/.devnet-standard/allocs-l1.json .devnet-standard/allocs-l1.json
            cp /tmp/workspace/.devnet-standard/allocs-l2-delta.json .devnet-standard/allocs-l2-delta.json
            cp /tmp/workspace/.devnet-standard/allocs-l2-ecotone.json .devnet-standard/allocs-l2-ecotone.json
            cp /tmp/workspace/.devnet-standard/allocs-l2-fjord.json .devnet-standard/allocs-l2-fjord.json
            cp /tmp/workspace/.devnet-standard/allocs-l2-granite.json .devnet-standard/allocs-l2-granite.json
            cp /tmp/workspace/.devnet-standard/allocs-l2-holocene.json .devnet-standard/allocs-l2-holocene.json
            cp /tmp/workspace/.devnet-standard/addresses.json .devnet-standard/addresses.json
            cp /tmp/workspace/packages/contracts-bedrock/deploy-config/devnetL1.json devnetL1.json
            cp -r /tmp/workspace/packages/contracts-bedrock/deployments/devnetL1 devnetL1
          working_directory: rvsol
      - run:
          name: Copy L1 Allocs
          command: cp .devnet-standard/allocs-l1.json allocs-l1.json
          working_directory: rvsol
      - run:
          name: Generate allocs including asterisc
          command: >
            ASTERISC_PRESTATE=./prestate-proof.json
            TARGET_L2_DEPLOYMENT_FILE=./devnetL1/.deploy
            TARGET_L2_DEPLOY_CONFIG=./devnetL1.json
            TARGET_L1_ALLOC=./allocs-l1.json
            DEPLOYMENT_OUTFILE=./deployments/devnetL1/.deploy
            STATE_DUMP_PATH=./allocs-l1-asterisc.json
            ./scripts/create_poststate_after_deployment.sh
          working_directory: rvsol
      - run:
          name: Create address json
          command: |
            mkdir -p .devnet-asterisc
            jq -s '.[0] * .[1]' ./deployments/devnetL1/.deploy ./devnetL1/.deploy | tee .devnet-asterisc/addresses.json
          working_directory: rvsol
      - run:
          name: Copy L1 Allocs
          command: |
            cp ./allocs-l1-asterisc.json .devnet-asterisc/allocs-l1.json
          working_directory: rvsol
      - run:
          name: Patch .deploy
          command: |
            mkdir -p packages/contracts-bedrock/deployments/devnetL1
            cp .devnet-asterisc/addresses.json packages/contracts-bedrock/deployments/devnetL1/.deploy
          working_directory: rvsol
      - run:
          name: Sanity Check
          command: |
            ASTERISC_ADDR=$(jq '.RISCV' .devnet-asterisc/addresses.json | tr '[:upper:]' '[:lower:]')
            ASTERISC_ADDR=$(echo ${ASTERISC_ADDR//\"/})
            echo $ASTERISC_ADDR
            jq --arg key $ASTERISC_ADDR '.[$key]' ./allocs-l1-asterisc.json
          working_directory: rvsol
      - run:
          name: Copy L2 Allocs
          command: |
            cp .devnet-standard/allocs-l2-delta.json .devnet-asterisc/allocs-l2-delta.json
            cp .devnet-standard/allocs-l2-ecotone.json .devnet-asterisc/allocs-l2-ecotone.json
            cp .devnet-standard/allocs-l2-fjord.json .devnet-asterisc/allocs-l2-fjord.json
            cp .devnet-standard/allocs-l2-granite.json .devnet-asterisc/allocs-l2-granite.json
            cp .devnet-standard/allocs-l2-holocene.json .devnet-asterisc/allocs-l2-holocene.json
          working_directory: rvsol
      - persist_to_workspace:
          root: rvsol
          paths:
            - ".devnet-asterisc"
            - "packages/contracts-bedrock/deployments/devnetL1"
            # we do not patch devnetL1.json because it did not change

  op-e2e-asterisc-tests:
    docker:
      - image: <<pipeline.parameters.ci_builder_image>>
    resource_class: xlarge
    parallelism: 4
    steps:
      - checkout-with-monorepo
      - attach_workspace:
          at: /tmp/workspace
      - restore_cache:
          name: Restore Go modules cache for monorepo
          # this go mod cache will be populated from go-mod-download-monorepo step
          key: gomod-{{ checksum "rvsol/lib/optimism/go.sum" }}
      - run:
          name: Make op-program at monorepo
          command: make op-program
      - run:
          name: Load devnet-allocs
          command: |
            mkdir -p .devnet-standard
            cp /tmp/workspace/.devnet-asterisc/allocs-l1.json .devnet-standard/allocs-l1.json
            cp /tmp/workspace/.devnet-asterisc/allocs-l2-delta.json .devnet-standard/allocs-l2-delta.json
            cp /tmp/workspace/.devnet-asterisc/allocs-l2-ecotone.json .devnet-standard/allocs-l2-ecotone.json
            cp /tmp/workspace/.devnet-asterisc/allocs-l2-fjord.json .devnet-standard/allocs-l2-fjord.json
            cp /tmp/workspace/.devnet-asterisc/allocs-l2-granite.json .devnet-standard/allocs-l2-granite.json
            cp /tmp/workspace/.devnet-asterisc/allocs-l2-holocene.json .devnet-standard/allocs-l2-holocene.json
            cp /tmp/workspace/.devnet-asterisc/addresses.json .devnet-standard/addresses.json
            mkdir -p packages/contracts-bedrock
            cp -r /tmp/workspace/packages/contracts-bedrock/deploy-config packages/contracts-bedrock
            mkdir -p packages/contracts-bedrock/deployments/devnetL1
            cp -r /tmp/workspace/packages/contracts-bedrock/deployments/devnetL1 packages/contracts-bedrock/deployments
      - restore_cache:
          name: Restore Go modules cache
          # this go mod cache will be populated from go-mod-download-monorepo step
          key: gomod-{{ checksum "go.sum" }}
      - run:
          name: Load asterisc artifacts
          command: |
            mkdir -p rvgo/bin
            cp -r /tmp/workspace/asterisc-artifacts/* rvgo/bin
      - run:
          name: run tests
          no_output_timeout: 20m
          command: |
            mkdir -p /testlogs
            OP_TESTLOG_DISABLE_COLOR=true OP_E2E_DISABLE_PARALLEL=false gotestsum --format=testname --junitfile=/tmp/test-results/op_e2e_test-asterisc.xml --jsonfile=/testlogs/test.log -- -failfast -timeout=60m -parallel=8 ./faultproofs
          working_directory: op-e2e
      - store_artifacts:
          path: /testlogs
          when: always
      - store_test_results:
          path: /tmp/test-results

  prestate-reproducibility:
    docker:
      - image: <<pipeline.parameters.ci_builder_image>>
    parameters:
      version:
        type: string
      asterisc-commit:
        type: string
    steps:
      - checkout
      - run:
          name: Checkout asterisc to correct commit
          command: |
            # we need to use proper asterisc version that works with specific op-program version 
            cp prestates.json temp.json
            git checkout "<<parameters.asterisc-commit>>"
            cp -f temp.json prestates.json
      - setup_remote_docker
      - run:
          name: Fetch submodules for asterisc
          command: git submodule update --init
      - run:
          name: Switch to tag
          command: |
            cd rvsol/lib/optimism
            git fetch
            git checkout "op-program/v<<parameters.version>>"
            git submodule update --init --recursive
      - run:
          name: Build prestate
          command: make reproducible-prestate
      - run:
          name: Verify prestate
          command: |
            EXPECTED_PRESTATE_HASH=$(jq -r '.["op-program"]["<<parameters.version>>"]' ./prestates.json)
            ACTUAL=$(jq -r .stateHash ./bin/prestate.json)
            echo "Expected: ${EXPECTED_PRESTATE_HASH}"
            echo "Actual:   ${ACTUAL}"
            if [[ "${EXPECTED_PRESTATE_HASH}" != "${ACTUAL}" ]]
            then
              echo "Prestate did not match expected"
              exit 1
            fi
