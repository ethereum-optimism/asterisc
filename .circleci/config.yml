version: 2.1

executors:
  default:
    docker:
      - image: cimg/base:2024.01

workflows:
  main:
    jobs:
      - check-optimism-version-match
      - contracts-bedrock-build
      - op-program-riscv
      - op-program-test
      - asterisc-prestate:
          requires:
            - op-program-riscv
            - contracts-bedrock-build
      - devnet-allocs-including-asterisc:
          requires:
            - asterisc-prestate
      - op-e2e-asterisc-tests:
          requires:
            - devnet-allocs-including-asterisc
      - prestate-reproducibility:
          version: "1.0.0"
          asterisc-commit: "25feabf"
      - prestate-reproducibility:
          version: "1.1.0"
          asterisc-commit: "25feabf"
      - prestate-reproducibility:
          version: "1.2.0"
          asterisc-commit: "25feabf"
      - prestate-reproducibility:
          version: "1.3.1"
          asterisc-commit: "25feabf"
      - go-lint
      - rvgo-abigen
      - rvgo-tests
      - rvsol-lint
      - rvsol-tests

commands:
  install-dependencies:
    steps:
      - checkout
      - run:
          name: Initialize mise environment
          command: |
            # This is used to create a per-user cache key to preserve permissions across different
            # executor types.
            user=$(whoami)
            echo "$user" > .executor-user
            echo "Set executor user to $user."
            
            if [[ "$user" == "root" ]]; then
              # Self-hosted runners will persist this cache between runs. Cleaning it up means that we
              # preserve the semantics of the cache regardless of executor type. It's also much faster
              # to delete the cache and recreate it than it is to overwrite it in place.
              rm -rf /data/mise-data
              echo "Cleaned up cache data."
            
              mkdir -p /data/mise-data
              echo "Created Mise data dir."
              mkdir -p ~/.cache
              echo "Created Mise cache dir."
            else
              sudo rm -rf /data/mise-data
              echo "Cleaned up cache data."
              sudo mkdir -p /data/mise-data
              sudo chown -R "$user:$user" /data/mise-data
              echo "Created Mise data dir."
              sudo mkdir -p ~/.cache
              sudo chown -R "$user:$user" ~/.cache
              echo "Created Mise cache dir."
            fi
      - restore_cache:
          name: Restore mise cache
          keys:
            - mise-v5-{{ checksum ".executor-user" }}-{{ checksum "mise.toml" }}
      - run:
          name: Install mise
          command: |
            if command -v mise &> /dev/null; then
              echo "mise already installed at $(command -v mise)"
            else
              curl https://mise.run | sh
            fi
            
            echo "export PATH=\"$HOME/.local/bin:\$PATH\"" >> "$BASH_ENV"
            echo "export MISE_DATA_DIR=/data/mise-data" >> "$BASH_ENV"
            echo "export MISE_JOBS=$(nproc)" >> "$BASH_ENV"
            echo "eval \"\$($HOME/.local/bin/mise activate --shims)\"" >> "$BASH_ENV"
      - run:
          name: Install mise deps
          command: |
            mise install -v -y
            if [ -f "rvsol/lib/optimism/mise.toml" ]; then
              cd rvsol/lib/optimism
              mise install -v -y
            fi

      - save_cache:
          name: Save mise cache
          key: mise-v5-{{ checksum ".executor-user" }}-{{ checksum "mise.toml" }}
          paths:
            - /data/mise-data

  install-go-modules:
    parameters:
      from:
        description: Path to go.sum file
        type: string
        default: go.sum
      path:
        description: Go module cache path
        type: string
        default: /go/pkg/mod
      version:
        description: Version (cache breaker)
        type: string
        default: v1
      after_download:
        description: List of steps to run after downloading go modules
        type: steps
        default: []
    steps:
      - restore_cache:
          name: Restore Go modules cache
          keys:
            - go-mod-{{ arch }}-{{ checksum "<< parameters.from >>" }}-<< parameters.version >>
      - run:
          name: Download Go modules
          command: go mod download
      - steps: << parameters.after_download >>
      - save_cache:
          key: go-mod-{{ arch }}-{{ checksum "<< parameters.from >>" }}-<< parameters.version >>
          paths:
              - << parameters.path >>

  checkout-with-monorepo:
    steps:
      - checkout
      - run:
          name: Fetch submodules for asterisc
          # This will also fetch monorepo's submodule.
          # Therefore we do not have to call `make submodules` at monorepo root
          command: git submodule update --init --recursive

      - run:
          name: Debug CPUs
          command: |
            cat /proc/cpuinfo | grep processor | wc -l
            cat /proc/cpuinfo | grep 'core id'
  install-contracts-dependencies:
    description: "Install the dependencies for the smart contracts"
    steps:
      - run:
          command: just install
          working_directory: rvsol/lib/optimism/packages/contracts-bedrock

jobs:
  check-optimism-version-match:
    executor: default
    steps:
      - checkout-with-monorepo
      - install-dependencies
      - run:
          name: Check if optimism submodule version matches go.mod version
          command: ./.github/scripts/check_versions.sh
          
  contracts-bedrock-build:
    executor: default
    resource_class: xlarge
    steps:
      - checkout-with-monorepo
      - install-dependencies
      - install-go-modules
      - install-contracts-dependencies
      - restore_cache:
          name: Restore Go build cache
          keys:
            - golang-build-cache-contracts-build-{{ checksum "go.sum" }}
            - golang-build-cache-contracts-build-
      - run:
          name: Print forge version
          command: forge --version
      - run:
          name: Pull artifacts
          command: bash scripts/ops/pull-artifacts.sh
          working_directory: rvsol/lib/optimism/packages/contracts-bedrock
      - run:
          name: Build contracts
          command: forge build --deny-warnings --skip test
          environment:
            FOUNDRY_PROFILE: ci
          working_directory: rvsol/lib/optimism/packages/contracts-bedrock
      - run:
          name: Generate allocs
          command: make devnet-allocs
          working_directory: rvsol/lib/optimism
      - save_cache:
          name: Save Go build cache
          key: golang-build-cache-contracts-build-{{ checksum "go.sum" }}
          paths:
            - "/root/.cache/go-build"
      - persist_to_workspace:
          root: rvsol/lib/optimism
          paths:
            - "packages/contracts-bedrock/cache"
            - "packages/contracts-bedrock/artifacts"
            - "packages/contracts-bedrock/forge-artifacts"
            - "packages/contracts-bedrock/deploy-config/devnetL1.json"
            - "packages/contracts-bedrock/deployments/devnetL1"
            - ".devnet"
            - ".devnet-standard"

  op-program-riscv:
    executor: default
    resource_class: xlarge
    steps:
      - checkout-with-monorepo
      - install-dependencies
      - install-go-modules:
          from: rvsol/lib/optimism/go.sum
      - run:
          name: Build op-program-client-riscv
          command: make op-program-client-riscv
          working_directory: rvsol/lib/optimism/op-program
      - run:
          name: Copy op-program-client-riscv to op-program-artifacts
          command: cp -r bin op-program-artifacts
          working_directory: rvsol/lib/optimism/op-program
      - persist_to_workspace:
          root: rvsol/lib/optimism/op-program
          paths:
            - "op-program-artifacts"

  op-program-test:
    executor: default
    steps:
      - checkout-with-monorepo
      - install-dependencies
      - install-go-modules
      - run:
          name: Build asterisc
          command: make build-rvgo && cp rvgo/bin/asterisc tests/op-program-test/
      - run:
          name: Build op-program
          command: |
            make -C rvsol/lib/optimism/op-program op-program-host
            cp rvsol/lib/optimism/op-program/bin/op-program tests/op-program-test/
      - run: 
          name: Run op-program
          command: |
            tar -xzvf ./test-data.tar.gz
            ./local_cmd.sh
          working_directory: tests/op-program-test
  
  asterisc-prestate:
    executor: default
    resource_class: xlarge
    steps:
      - checkout
      - install-dependencies
      - attach_workspace:
          at: /tmp/workspace
      - install-go-modules
      - run:
          name: Load op-program-client-riscv
          command: |
            cp /tmp/workspace/op-program-artifacts/op-program-client-riscv.elf op-program-client-riscv.elf
      - run:
          name: Build Asterisc binary and contract
          command: make build
      - run:
          name: Generate asterisc prestate
          command: OP_PROGRAM_PATH=./op-program-client-riscv.elf make prestate
      - run:
          name: Copy asterisc artifacts to asterisc-artifacts
          command: cp -r rvgo/bin asterisc-artifacts
      - persist_to_workspace:
          root: .
          paths: 
            - "asterisc-artifacts"

  devnet-allocs-including-asterisc:
    executor: default
    resource_class: xlarge
    steps:
      - checkout-with-monorepo
      - install-dependencies
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Forge build
          # We first build here to avoid `failed to read artifact source file` foundry error while running forge script
          # issue: https://github.com/foundry-rs/foundry/issues/6572
          command: forge build
          working_directory: rvsol
      - run:
          name: Load asterisc absolute prestate
          command: cp /tmp/workspace/asterisc-artifacts/prestate-proof.json ./prestate-proof.json
          working_directory: rvsol
      - run:
          name: Load devnet-allocs
          command: |
            mkdir -p .devnet-standard
            cp /tmp/workspace/.devnet-standard/allocs-l1.json .devnet-standard/allocs-l1.json
            cp /tmp/workspace/.devnet-standard/allocs-l2-delta.json .devnet-standard/allocs-l2-delta.json
            cp /tmp/workspace/.devnet-standard/allocs-l2-ecotone.json .devnet-standard/allocs-l2-ecotone.json
            cp /tmp/workspace/.devnet-standard/allocs-l2-fjord.json .devnet-standard/allocs-l2-fjord.json
            cp /tmp/workspace/.devnet-standard/allocs-l2-granite.json .devnet-standard/allocs-l2-granite.json
            cp /tmp/workspace/.devnet-standard/allocs-l2-holocene.json .devnet-standard/allocs-l2-holocene.json
            cp /tmp/workspace/.devnet-standard/addresses.json .devnet-standard/addresses.json
            cp /tmp/workspace/packages/contracts-bedrock/deploy-config/devnetL1.json devnetL1.json
            cp -r /tmp/workspace/packages/contracts-bedrock/deployments/devnetL1 devnetL1
          working_directory: rvsol
      - run:
          name: Copy L1 Allocs
          command: cp .devnet-standard/allocs-l1.json allocs-l1.json
          working_directory: rvsol
      - run:
          name: Generate allocs including asterisc
          command: >
            ASTERISC_PRESTATE=./prestate-proof.json
            TARGET_L2_DEPLOYMENT_FILE=./devnetL1/.deploy
            TARGET_L2_DEPLOY_CONFIG=./devnetL1.json
            TARGET_L1_ALLOC=./allocs-l1.json
            DEPLOYMENT_OUTFILE=./deployments/devnetL1/.deploy
            STATE_DUMP_PATH=./allocs-l1-asterisc.json
            ./scripts/create_poststate_after_deployment.sh
          working_directory: rvsol
      - run:
          name: Create address json
          command: |
            mkdir -p .devnet-asterisc
            jq -s '.[0] * .[1]' ./deployments/devnetL1/.deploy ./devnetL1/.deploy | tee .devnet-asterisc/addresses.json
          working_directory: rvsol
      - run:
          name: Copy L1 Allocs
          command: |
            cp ./allocs-l1-asterisc.json .devnet-asterisc/allocs-l1.json
          working_directory: rvsol
      - run:
          name: Patch .deploy
          command: |
            mkdir -p packages/contracts-bedrock/deployments/devnetL1
            cp .devnet-asterisc/addresses.json packages/contracts-bedrock/deployments/devnetL1/.deploy
          working_directory: rvsol
      - run:
          name: Sanity Check
          command: |
            ASTERISC_ADDR=$(jq '.RISCV' .devnet-asterisc/addresses.json | tr '[:upper:]' '[:lower:]')
            ASTERISC_ADDR=$(echo ${ASTERISC_ADDR//\"/})
            echo $ASTERISC_ADDR
            jq --arg key $ASTERISC_ADDR '.[$key]' ./allocs-l1-asterisc.json
          working_directory: rvsol
      - run:
          name: Copy L2 Allocs
          command: |
            cp .devnet-standard/allocs-l2-delta.json .devnet-asterisc/allocs-l2-delta.json
            cp .devnet-standard/allocs-l2-ecotone.json .devnet-asterisc/allocs-l2-ecotone.json
            cp .devnet-standard/allocs-l2-fjord.json .devnet-asterisc/allocs-l2-fjord.json
            cp .devnet-standard/allocs-l2-granite.json .devnet-asterisc/allocs-l2-granite.json
            cp .devnet-standard/allocs-l2-holocene.json .devnet-asterisc/allocs-l2-holocene.json
          working_directory: rvsol
      - persist_to_workspace:
          root: rvsol
          paths:
            - ".devnet-asterisc"
            - "packages/contracts-bedrock/deployments/devnetL1"
            # we do not patch devnetL1.json because it did not change

  op-e2e-asterisc-tests:
    executor: default
    resource_class: xlarge
    parallelism: 4
    steps:
      - checkout-with-monorepo
      - install-dependencies
      - attach_workspace:
          at: /tmp/workspace
      - install-go-modules:
          from: rvsol/lib/optimism/go.sum
      - run:
          name: Make op-program at monorepo
          command: make op-program
      - run:
          name: Load devnet-allocs
          command: |
            mkdir -p .devnet-standard
            cp /tmp/workspace/.devnet-asterisc/allocs-l1.json .devnet-standard/allocs-l1.json
            cp /tmp/workspace/.devnet-asterisc/allocs-l2-delta.json .devnet-standard/allocs-l2-delta.json
            cp /tmp/workspace/.devnet-asterisc/allocs-l2-ecotone.json .devnet-standard/allocs-l2-ecotone.json
            cp /tmp/workspace/.devnet-asterisc/allocs-l2-fjord.json .devnet-standard/allocs-l2-fjord.json
            cp /tmp/workspace/.devnet-asterisc/allocs-l2-granite.json .devnet-standard/allocs-l2-granite.json
            cp /tmp/workspace/.devnet-asterisc/allocs-l2-holocene.json .devnet-standard/allocs-l2-holocene.json
            cp /tmp/workspace/.devnet-asterisc/addresses.json .devnet-standard/addresses.json
            mkdir -p packages/contracts-bedrock
            cp -r /tmp/workspace/packages/contracts-bedrock/deploy-config packages/contracts-bedrock
            mkdir -p packages/contracts-bedrock/deployments/devnetL1
            cp -r /tmp/workspace/packages/contracts-bedrock/deployments/devnetL1 packages/contracts-bedrock/deployments
      - install-go-modules
      - run:
          name: Load asterisc artifacts
          command: |
            mkdir -p rvgo/bin
            cp -r /tmp/workspace/asterisc-artifacts/* rvgo/bin
      - run:
          name: run tests
          no_output_timeout: 20m
          command: |
            mkdir -p /tmp/testlogs
            OP_TESTLOG_DISABLE_COLOR=true OP_E2E_DISABLE_PARALLEL=false gotestsum --format=testname --junitfile=/tmp/test-results/op_e2e_test-asterisc.xml --jsonfile=/tmp/testlogs/test.log -- -failfast -timeout=60m -parallel=8 ./faultproofs
          working_directory: op-e2e
      - store_artifacts:
          path: /tmp/testlogs
      - store_test_results:
          path: /tmp/test-results

  prestate-reproducibility:
    executor: default
    parameters:
      version:
        type: string
      asterisc-commit:
        type: string
    steps:
      - checkout
      - install-dependencies
      - setup_remote_docker
      - run:
          name: Checkout asterisc to correct commit
          command: |
            # we need to use proper asterisc version that works with specific op-program version 
            cp prestates.json temp.json
            git checkout "<<parameters.asterisc-commit>>"
            cp -f temp.json prestates.json
      - run:
          name: Fetch submodules for asterisc
          command: git submodule update --init
      - run:
          name: Switch to tag
          command: |
            cd rvsol/lib/optimism
            git fetch
            git checkout "op-program/v<<parameters.version>>"
            git submodule update --init --recursive
      - run:
          name: Build prestate
          command: make reproducible-prestate
      - run:
          name: Verify prestate
          command: |
            EXPECTED_PRESTATE_HASH=$(jq -r '.["op-program"]["<<parameters.version>>"]' ./prestates.json)
            ACTUAL=$(jq -r .stateHash ./bin/prestate.json)
            echo "Expected: ${EXPECTED_PRESTATE_HASH}"
            echo "Actual:   ${ACTUAL}"
            if [[ "${EXPECTED_PRESTATE_HASH}" != "${ACTUAL}" ]]
            then
              echo "Prestate did not match expected"
              exit 1
            fi

  go-lint:
    executor: default
    steps:
      - checkout
      - install-dependencies
      - install-go-modules
      - run:
          name: Run lint
          command: golangci-lint run

  rvgo-abigen:
    executor: default
    steps:
      - checkout
      - install-dependencies
      - install-go-modules
      - run:
          name: Build rvsol
          command: forge build
          working_directory: rvsol
      - run:
          name: Check bindings
          command: |
            make gen-bindings
            git diff --exit-code bindings
          working_directory: rvgo

  rvgo-tests:
    executor: default
    steps:
      - checkout
      - install-dependencies
      - install-go-modules
      - run:
          name: Build rvsol
          command: forge build
          working_directory: rvsol
      - run:
          name: Build rv64g test binaries
          command: make bin bin/simple bin/minimal
          working_directory: tests/go-tests
      - run:
          name: Run tests
          command: go test -v ./rvgo/... -coverprofile=coverage.out -coverpkg=./rvgo/...
      - run:
          name: Fuzz
          command: make fuzz
      - run:
          name: Upload coverage to Codecov
          command: codecov-cli do-upload --token $CODECOV_TOKEN --verbose

  rvsol-lint:
    executor: default
    steps:
      - checkout
      - install-dependencies
      - install-go-modules
      - run:
          name: Run lint
          command: make lint-check
          working_directory: rvsol

  rvsol-tests:
    executor: default
    steps:
      - checkout
      - install-dependencies
      - install-go-modules
      - run:
          name: Build FFI
          command: go build
          working_directory: rvgo/scripts/go-ffi
      - run:
          name: Run foundry tests
          command: forge test -vvv --ffi
          working_directory: rvsol